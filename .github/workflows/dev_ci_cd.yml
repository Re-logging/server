name: develop branch CI

on:
 pull_request:
   branches: [ "develop", release-** ]
   types: [ "opened", "reopened", "synchronize", "closed" ]

permissions:
  contents: read

jobs:
  style-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4.4.0
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Style check
      run: |  
        ./gradlew spotlessCheck

  build:
    runs-on: ubuntu-latest

    env:
      MYSQL_DATABASE: ${{ secrets.LOCAL_MYSQL_DATABASE }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.LOCAL_MYSQL_ROOT_PASSWORD }}
      DATASOURCE_URL: ${{ secrets.LOCAL_DATASOURCE_URL }}
      DATASOURCE_USERNAME: ${{ secrets.LOCAL_DATASOURCE_USERNAME }}
      DATASOURCE_PASSWORD: ${{ secrets.LOCAL_DATASOURCE_PASSWORD }}
      NEWS_ARTICLE_IMAGE_DIR: ${{ secrets.LOCAL_NEWS_ARTICLE_IMAGE_DIR }}
      OPEN_AI_KEY: ${{ secrets.LOCAL_OPEN_AI_KEY }}
      

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4.4.0
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Setup Docker
      run: docker compose up -d

    - name: Grant execute permission
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew clean build -x test

    - name: Test with Gradle
      run: ./gradlew test

  deploy-dev:
    if: (github.ref == 'refs/heads/develop' || contains(github.ref, 'release')) && github.event.pull_request.merged == true
    needs: build
    runs-on: ubuntu-latest

    # env:
    #   MYSQL_DATABASE: ${{ secrets.LOCAL_MYSQL_DATABASE }}
    #   MYSQL_ROOT_PASSWORD: ${{ secrets.LOCAL_MYSQL_ROOT_PASSWORD }}
    #   DATASOURCE_URL: ${{ secrets.LOCAL_DATASOURCE_URL }}
    #   DATASOURCE_USERNAME: ${{ secrets.LOCAL_DATASOURCE_USERNAME }}
    #   DATASOURCE_PASSWORD: ${{ secrets.LOCAL_DATASOURCE_PASSWORD }}
    #   NEWS_ARTICLE_IMAGE_DIR: ${{ secrets.LOCAL_NEWS_ARTICLE_IMAGE_DIR }}
    #   OPEN_AI_KEY: ${{ secrets.LOCAL_OPEN_AI_KEY }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4.4.0
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Docker build & push
      run: |
        ./gradlew bootjar
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_DEV_IMAGE }} .
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_DEV_IMAGE }}

    - name: Deploy
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DEV_SERVER_HOST }}
        port: ${{ secrets.DEV_SERVER_PORT }}
        username: ${{ secrets.DEV_SERVER_USERNAME }}
        password: ${{ secrets.DEV_SERVER_PASSWORD }}
        debug: true
        script: |
          rm .env
          touch .env
          echo "MYSQL_DATABASE=${{ secrets.LOCAL_MYSQL_DATABASE }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.LOCAL_MYSQL_ROOT_PASSWORD }}" >> .env
          echo "DATASOURCE_URL=${{ secrets.DEV_DATASOURCE_URL }}" >> .env
          echo "DATASOURCE_USERNAME=${{ secrets.LOCAL_DATASOURCE_USERNAME }}" >> .env
          echo "DATASOURCE_PASSWORD=${{ secrets.LOCAL_DATASOURCE_PASSWORD }}" >> .env
          echo "NEWS_ARTICLE_IMAGE_DIR=${{ secrets.LOCAL_NEWS_ARTICLE_IMAGE_DIR }}" >> .env
          echo "OPEN_AI_KEY=${{ secrets.LOCAL_OPEN_AI_KEY }}" >> .env
          docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_DEV_IMAGE }}
          docker stop ${{ secrets.CONTAINER_NAME }} 
          docker rm ${{ secrets.CONTAINER_NAME }}
          docker run --name=${{ secrets.CONTAINER_NAME }} -d -p 8080:8080 -v $HOME/logs:/logs --env-file ./.env --network relogging_relogging ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_DEV_IMAGE }}
          docker container prune -f
          docker image prune -f
