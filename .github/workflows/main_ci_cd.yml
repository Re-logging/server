name: Main Server CI/CD

on:
  pull_request:
    branches: [ "main" ]
    types: [ "closed" ]

permissions:
  contents: read

jobs:
  validate-branch:
    if: startsWith(${{ github.head_ref }}, 'release-')
    runs-on: ubuntu-latest
    steps:
      - name: Validate branch
        run: |
          BRANCH_NAME=${{ github.head_ref }}
          if [[ ! "$BRANCH_NAME" =~ ^release-[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            echo "$BRANCH_NAME does not match the pattern release-x.y.z"
            exit 1
          fi

  validate-merged:
    needs: validate-branch
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Validate merged
        run: |
          echo 'The PR was merged'

  extract-version:
    needs: validate-merged
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}

    steps:
      - name: extract version
        id: extract-version
        run: |
          BRANCH_NAME=${{ github.head_ref }}
          echo "version=$(echo $BRANCH_NAME | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')" >> "$GITHUB_OUTPUT"

  build:
    needs: extract-version
    runs-on: ubuntu-latest

    env:
      MYSQL_DATABASE: ${{ secrets.LOCAL_MYSQL_DATABASE }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.LOCAL_MYSQL_ROOT_PASSWORD }}
      DATASOURCE_URL: ${{ secrets.LOCAL_DATASOURCE_URL }}
      DATASOURCE_USERNAME: ${{ secrets.LOCAL_DATASOURCE_USERNAME }}
      DATASOURCE_PASSWORD: ${{ secrets.LOCAL_DATASOURCE_PASSWORD }}
      NEWS_ARTICLE_IMAGE_DIR: ${{ secrets.LOCAL_NEWS_ARTICLE_IMAGE_DIR }}
      OPEN_AI_KEY: ${{ secrets.LOCAL_OPEN_AI_KEY }}
    
    steps:  
      - name: Checkout
        uses: actions/checkout@v4    
      
      - name: Setup JDK 21
        uses: actions/setup-java@v4.4.0
        with:
          java-version: '21'
          distribution: 'temurin'
  
      - name: Setup Docker
        run: docker compose up -d
  
      - name: Grant execute permission
        run: chmod +x ./gradlew
  
      - name: Build with Gradle
        run: ./gradlew clean build -x test
  
      - name: Test with Gradle
        run: ./gradlew test

  deploy:
    needs: [build, extract-version]
    runs-on: ubuntu-latest

    env:
      MYSQL_DATABASE: ${{ secrets.PROD_MYSQL_DATABASE }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.PROD_MYSQL_ROOT_PASSWORD }}
      DATASOURCE_URL: ${{ secrets.PROD_DATASOURCE_URL }}
      DATASOURCE_USERNAME: ${{ secrets.PROD_DATASOURCE_USERNAME }}
      DATASOURCE_PASSWORD: ${{ secrets.PROD_DATASOURCE_PASSWORD }}
      NEWS_ARTICLE_IMAGE_DIR: ${{ secrets.LOCAL_NEWS_ARTICLE_IMAGE_DIR }}
      OPEN_AI_KEY: ${{ secrets.LOCAL_OPEN_AI_KEY }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 21
        uses: actions/setup-java@v4.4.0
        with:
          java-version: '21'
          distribution: 'temurin'
  
      - name: Docker build & push
        run: |
          ./gradlew bootjar
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROD_DOCKER_IMAGE }}:${{ needs.extract-version.outputs.version }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROD_DOCKER_IMAGE }}:${{ needs.extract-version.outputs.version }}
  
      - name: Deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          port: ${{ secrets.PROD_SERVER_PORT }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          debug: true
          script: |
            rm .env
            touch .env
            echo "MYSQL_DATABASE=${{ secrets.PROD_MYSQL_DATABASE }}" >> .env
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.PROD_MYSQL_ROOT_PASSWORD }}" >> .env
            echo "DATASOURCE_URL=${{ secrets.PROD_DATASOURCE_URL }}" >> .env
            echo "DATASOURCE_USERNAME=${{ secrets.PROD_DATASOURCE_USERNAME }}" >> .env
            echo "DATASOURCE_PASSWORD=${{ secrets.PROD_DATASOURCE_PASSWORD }}" >> .env
            echo "NEWS_ARTICLE_IMAGE_DIR=${{ secrets.LOCAL_NEWS_ARTICLE_IMAGE_DIR }}" >> .env
            echo "OPEN_AI_KEY=${{ secrets.LOCAL_OPEN_AI_KEY }}" >> .env
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROD_DOCKER_IMAGE }}:${{ needs.extract-version.outputs.version }}
            docker stop ${{ secrets.CONTAINER_NAME }}
            docker rm ${{ secrets.CONTAINER_NAME }}
            docker run --name=${{ secrets.CONTAINER_NAME }} -d -p 8083:8080 -v $HOME/logs:/logs --env-file ./.env ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROD_DOCKER_IMAGE }}:${{ needs.extract-version.outputs.version }}
            docker container prune -f
            docker image prune -f

  create-release:
    needs: [deploy, extract-version]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: create release
        uses: ncipollo/release-action@v1.13.0
        with: 
          tag: ${{ needs.extract-version.outputs.version }}
          name: ${{ needs.extract-version.outputs.version }}
